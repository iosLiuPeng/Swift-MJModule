//
//  Log.swift
//  Alamofire
//
//  Created by ÈªÑÁ£ä on 2018/5/30.
//
import Foundation

// MARK: - Êâ©Â±ï

extension ConfigKey {
    /// Êó•Âøó
    public struct Log {
        
        // Êó•ÂøóÂ±èËîΩ
        /// Â±èËîΩË∑üË∏™Êó•Âøó
        public static let blockTrace    = "LogBlockTrace"
        /// Â±èËîΩ‰ø°ÊÅØÊó•Âøó
        public static let blockInfo     = "LogBlockInfo"
        /// Â±èËîΩDebugÊó•Âøó
        public static let blockDebug    = "LogBlockDebug"
        /// Â±èËîΩË≠¶ÂëäÊó•Âøó
        public static let blockWarning  = "LogBlockWarning"
        /// Â±èËîΩÈîôËØØÊó•Âøó
        public static let blockError    = "LogBlockError"
        
        
        // Êó•ÂøóÊ†ºÂºè
        /// Êó•Âøó ‰∏çÂåÖÂê´Êó∂Èó¥
        public static let withoutTime   = "LogWithoutTime"
        /// Êó•Âøó ‰∏çÂåÖÂê´Ë°åÊï∞
        public static let withoutLine   = "LogWithoutLine"
        /// Êó•Âøó ‰∏çÂåÖÂê´ÊñπÊ≥ïÂêç
        public static let withoutMethod = "LogWithoutMethod"
        
        
        /// ÊâìÂç∞Âà∞ÊéßÂà∂Âè∞
        public static let toConsole     = "LogToConsole"
        /// ÂÜôÂÖ•Âà∞Êñá‰ª∂
        public static let writeToFile   = "LogWriteToFile"
    }
}


// MARK: - ÈùôÊÄÅÂèòÈáè

// Êó•ÂøóÈ¢úËâ≤ÔºåÊöÇÊó∂Ê≤°Êúâ‰ΩøÁî®
public let g_logColorTrace : UIColor    = Config.valueOf("LogColorTrace", UIColor.lightGray)
public let g_logColorInfo : UIColor     = Config.valueOf("LogColorInfo", UIColor.black)
public let g_logColorDebug : UIColor    = Config.valueOf("LogColorDebug", UIColor.lightGray)
public let g_logColorWarning : UIColor  = Config.valueOf("LogColorWarning", UIColor.yellow)
public let g_logColorError : UIColor    = Config.valueOf("LogColorError", UIColor.red)

/// Êó•ÂøóÊó•ÊúüÊ†ºÂºè
let s_dateFormat : DateFormatter = {
    let dateFormat : DateFormatter = DateFormatter()
    dateFormat.dateFormat = "yyyy-MM-dd HH:mm:ss.SSS|Z"
    return dateFormat
}()

// Êó•ÂøóÂ±èËîΩ
let s_logBlockTrace     = isLogBlockFor(ConfigKey.Log.blockTrace, false)
let s_logBlockInfo      = isLogBlockFor(ConfigKey.Log.blockInfo, false)
let s_logBlockDebug     = isLogBlockFor(ConfigKey.Log.blockDebug, true)
let s_logBlockWarning   = isLogBlockFor(ConfigKey.Log.blockWarning, false)
let s_logBlockError     = isLogBlockFor(ConfigKey.Log.blockError, false)

// Êó•ÂøóÊ†ºÂºè
let s_logWithoutTime    = Config.valueOf(ConfigKey.Log.withoutTime, false)
let s_logWithoutLine    = Config.valueOf(ConfigKey.Log.withoutLine, false)
let s_logWithoutMethod  = Config.valueOf(ConfigKey.Log.withoutMethod, false)

// ÊâìÂç∞Âà∞ÊéßÂà∂Âè∞
let s_logToConsole      = Config.valueOf(ConfigKey.Log.toConsole, false)
// ÂÜôÂÖ•Êó•ÂøóÂà∞Êñá‰ª∂
let s_logWriteToFile    = Config.valueOf(ConfigKey.Log.writeToFile, false)

// MARK: - ÂÖ¨ÂÖ±ÊñπÊ≥ï

/// Ë∑üË∏™ÊµÅÁ®ãÊó∂‰ΩøÁî®
public func LogTrace(_ message:Any..., color:UIColor = g_logColorTrace, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    s_logBlockTrace ? nil : LogFormat(" ‚û°Ô∏èTrace‚û°Ô∏è ", message, color:color, file, line, method)
}

public func LogInfo(_ message:Any..., color:UIColor = g_logColorInfo, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    s_logBlockInfo ? nil : LogFormat(" üëâInfoüëâ  ", message, color:color, file, line, method)
}

public func LogDebug(_ message:Any..., color:UIColor = g_logColorDebug, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    s_logBlockDebug ? nil : LogFormat(" üîçDebugüîç ", message, color:color, file, line, method)
}

public func LogWarning(_ message:Any..., color:UIColor = g_logColorWarning, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    s_logBlockWarning ? nil : LogFormat("‚ö†Ô∏èWarning‚ö†Ô∏è", message, color:color, file, line, method)
}


public func LogError(_ message:Any..., color:UIColor = g_logColorError, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    s_logBlockError ? nil : LogFormat(" ‚ÄºÔ∏èError‚ÄºÔ∏è ", message, color:color, file, line, method)
}


// MARK: - ÁßÅÊúâÊñπÊ≥ï

/// Ê†ºÂºèÂåñlog
func LogFormat(_ type:String, _ messages:[Any], color:UIColor, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
#if DEBUG
    let message = messages.map {"\($0)"}.joined(separator: " ")
    let location = (file as NSString).lastPathComponent + (s_logWithoutLine ? "" : String(format:"(%4d)", line)) + (s_logWithoutMethod ? "" : ("." + method));
    print(s_logWithoutTime ? "" : s_dateFormat.string(from: Date()), "[\(type)]", location, "‚ÜîÔ∏è" , message)
#else
    
    #if ForTest
    // ÊµãËØïÁâàlogÂç≥ÊâìÂà∞ÊéßÂà∂Âè∞Ôºå‰πüÊâìÂà∞Êó•Âøó
    let message = messages.map {"\($0)"}.joined(separator: " ")
    let location = (file as NSString).lastPathComponent + (s_logWithoutLine ? "" : String(format:"(%4d)", line)) + (s_logWithoutMethod ? "" : ("." + method));
    print(s_logWithoutTime ? "" : s_dateFormat.string(from: Date()), "[\(type)]", location, "‚ÜîÔ∏è" , message)
    // ÊâìÂç∞Âà∞Êó•Âøó
    LogToFile(type, messages, color: color, file, line, method)
    #else
    if s_logToConsole {
        let message = messages.map {"\($0)"}.joined(separator: " ")
        let location = (file as NSString).lastPathComponent + (s_logWithoutLine ? "" : String(format:"(%4d)", line)) + (s_logWithoutMethod ? "" : ("." + method));
        print(s_logWithoutTime ? "" : s_dateFormat.string(from: Date()), "[\(type)]", location, "‚ÜîÔ∏è" , message)
    }
    if s_logWriteToFile {
        // ÂèëÂ∏ÉÁöÑÈùûÊµãËØï‰∫ßÂìÅÔºåÂ¶ÇÊûúÂºÄÂêØ‰∫ÜËØ•ÂäüËÉΩÔºå‰πüÂèØ‰ª•ÂÜôÂÖ•Âà∞Êñá‰ª∂
        LogToFile(type, messages, color: color, file, line, method)
    }
    
    #endif
    
#endif
}

// ËÆ∞ÂΩïÂà∞Êñá‰ª∂ÔºåÂêéÊúüÂºÄÂèë
func LogToFile(_ type:String, _ messages:[Any], color:UIColor, _ file: String = #file, _ line: Int = #line, _ method: String = #function) {
    
}

/// Âà§Êñ≠ÊòØÂê¶Â±èËîΩLog
func isLogBlockFor(_ blockType : String, _ defaut : Bool) -> Bool {
    let isBlock = Config.valueOf(blockType, defaut);
    if isBlock != defaut {
        if isBlock {
            print("\n‚ÄºÔ∏è‚ö†Ô∏è‚ö†Ô∏è‚ÄºÔ∏è [ \(blockType) ] is enableüö´")
        } else {
            print("\n‚ÄºÔ∏è‚ö†Ô∏è‚ö†Ô∏è‚ÄºÔ∏è [ \(blockType) ] is disable‚úÖ")
        }
    }
    return isBlock;
}


